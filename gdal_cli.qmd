---
title: "Download data from a STAC API using GDAL and the command line"
execute:
  freeze: auto
format:
  html: default
  md: default
---

This tutorial walks through how to use the [STACIT GDAL Driver](https://gdal.org/drivers/raster/stacit.html) to retrieve data from a STAC catalog or collection using GDAL's command line interface (CLI). We'll be using data from Planetary Computer's [USGS Land Change Monitoring, Assessment, and Projection (LCMAP)](https://planetarycomputer.microsoft.com/dataset/usgs-lcmap-conus-v13) collection as an example.

To download the 2021 LCMAP primary land cover classification (`lcpri`) for the New York State bounding box, we can use gdalwarp with the STACIT driver like so:

```{bash}
gdalwarp "STACIT:\"https://planetarycomputer.microsoft.com/api/stac/v1/search?&collections=usgs-lcmap-conus-v13&datetime=2021-01-01/2021-12-31&bbox=-79.762,40.496,-71.856,45.013\":asset=lcpri" output.tif
```

That one-liner finds all the `lcpri` rasters for our spatiotemporal area of interest on Planetary Computer and downloads them, merging them into a single output file as it does so. Depending how familiar you are with HTTP queries, the one-liner probably either makes perfect sense or looks like complete gibberish. The rest of this tutorial will walk through the components of that one-liner, to try and help it make perfect sense to everyone.

Most of that one-liner is taken up by a single URL, which we use to find out where the relevant rasters we're after are on the Planetary Computer. The base of that URL points to the [Item-Search API endpoint](https://github.com/radiantearth/stac-api-spec/tree/main/item-search), which is a standardized API endpoint that STAC APIs like Planetary Computer's provide to let users search through the various collections and items available in the API. Let's put the URL for that endpoint in a variable called `QUERY_URL`:

```{bash}
QUERY_URL="https://planetarycomputer.microsoft.com/api/stac/v1/search"
echo $QUERY_URL
```

```{r}
#| echo: false
Sys.setenv(
  QUERY_URL = "https://planetarycomputer.microsoft.com/api/stac/v1/search"
)
```

Another long chunk of the URL in our one-liner is made up by query parameters, which we use to filter down the items provided by the API to just the data products and spatiotemporal range that we want. For instance, we'll want to set the `collections` parameter to filter our search to only include LCMAP data:

```{bash}
COLLECTION="usgs-lcmap-conus-v13"
QUERY_URL="$QUERY_URL?&collections=$COLLECTION"
echo $QUERY_URL
```

```{r}
#| echo: false
Sys.setenv(
  QUERY_URL = "https://planetarycomputer.microsoft.com/api/stac/v1/search?&collections=usgs-lcmap-conus-v13"
)
```

We'll also want to filter our results to only return items that fall within our spatiotemporal area of interest. We can set the temporal range of our query using the `datetime` parameter, providing a date formatted in [RFC 3339 Section 5.6](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) format. We'll limit our query to only return data for 2021:

```{bash}
DATETIME="2021-01-01/2021-12-31"
QUERY_URL="$QUERY_URL&datetime=$DATETIME"
echo $QUERY_URL
```

```{r}
#| echo: false
Sys.setenv(
  QUERY_URL = "https://planetarycomputer.microsoft.com/api/stac/v1/search?&collections=usgs-lcmap-conus-v13&datetime=2021-01-01/2021-12-31"
)
```

We also need to limit the spatial range of our results, using a bounding box in the [WGS 84](http://www.opengis.net/def/crs/OGC/1.3/CRS84):

```{bash}
WGS84_BBOX="-79.762,40.496,-71.856,45.013"
QUERY_URL="$QUERY_URL&bbox=$WGS84_BBOX"
echo $QUERY_URL
```

```{r}
#| echo: false
Sys.setenv(
  QUERY_URL = "https://planetarycomputer.microsoft.com/api/stac/v1/search?&collections=usgs-lcmap-conus-v13&datetime=2021-01-01/2021-12-31&bbox=-79.762,40.496,-71.856,45.013"
)
```

This is a complete item search query string! If we visited this URL -- or accessed it via cURL or another utility -- we'd see a feature collection listing metadata about all the available LCMAP rasters falling within our area of interest. We could optionally use cURL and [jq](https://jqlang.github.io/jq/) to take a peek at what this JSON document looks like:

```{bash}
curl -s $QUERY_URL | head -n 1 | jq > query.txt
head -n 18 query.txt
```

Now that our query URL is constructed, we need to add a few configuration options to inform GDAL we want to download data from this query using the STACIT driver. We'll start off by prepending `STACIT:` in front of our query url, which we'll also wrap in quotes (using `\"` to make sure those quotes are preserved):

```{bash}
QUERY_URL="STACIT:\"$QUERY_URL\""
echo $QUERY_URL
```

```{r}
#| echo: false
Sys.setenv(
  QUERY_URL = "STACIT:\"https://planetarycomputer.microsoft.com/api/stac/v1/search?&collections=usgs-lcmap-conus-v13&datetime=2021-01-01/2021-12-31&bbox=-79.762,40.496,-71.856,45.013\""
)
```

And last but not least, we'll specify that we only want to download the `lcpri` asset from each of the items returned by our query, by appending `:asset=lcpri` to the end of this URL:

```{bash}
ASSET="lcpri"
QUERY_URL="$QUERY_URL:asset=$ASSET"
echo $QUERY_URL
```

We've now constructed the URL that we used in the one-liner at the start of this tutorial! Let's look at what all of those elements look like when combined in a single chunk:

```{bash}
QUERY_URL="https://planetarycomputer.microsoft.com/api/stac/v1/search"
COLLECTION="usgs-lcmap-conus-v13"
DATETIME="2021-01-01/2021-12-31"
WGS84_BBOX="-79.762,40.496,-71.856,45.013"
ASSET="lcpri"

QUERY_URL="$QUERY_URL?&collections=$COLLECTION"
QUERY_URL="$QUERY_URL&datetime=$DATETIME"
QUERY_URL="$QUERY_URL&bbox=$WGS84_BBOX"
QUERY_URL="STACIT:\"$QUERY_URL\""
QUERY_URL="$QUERY_URL:asset=$ASSET"
echo $QUERY_URL
```

```{r}
#| echo: false
Sys.setenv(
  QUERY_URL = "STACIT:\"https://planetarycomputer.microsoft.com/api/stac/v1/search?&collections=usgs-lcmap-conus-v13&datetime=2021-01-01/2021-12-31&bbox=-79.762,40.496,-71.856,45.013\":asset=lcpri"
)
```

We're now able to use this query URL with any GDAL utility, letting us work with this remote data as if it were local. For instance, we can use gdalinfo to get information about the URLs we'd use to download the data we requested, as well as the extent, resolution, and CRS of this dataset:

```{bash}
gdalinfo $QUERY_URL
```

Or we can use gdalwarp to download these assets and merge them into a single file:

```{bash}
OUTPUT_FILE="lcpri_nys.tif"

gdalwarp $QUERY_URL $OUTPUT_FILE
```

The STACIT driver is smart enough to know how to follow the URLs provided by this feature collection to find and download our desired assets, and will even automatically handle authorizing our requests to the Planetary Computer. 
